/* 
Program 9 - Java program illustrating the concept of JDBC. Connect an already existing databse and perform SQL queries using JDBC.

Create Database -

-- Create a new database (if not exists)
CREATE DATABASE IF NOT EXISTS sample_db;

-- Switch to the new database
USE sample_db;

-- Create a table called employees
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    job_title VARCHAR(50),
    salary DECIMAL(10, 2)
);

-- Insert sample data into the employees table
INSERT INTO employees (employee_id, employee_name, job_title, salary)
VALUES
    (1, 'John Doe', 'Software Engineer', 75000.00),
    (2, 'Jane Smith', 'Data Analyst', 60000.00),
    (3, 'Bob Johnson', 'Product Manager', 90000.00),
    (4, 'Alice Brown', 'UX Designer', 80000.00);

// XAMPP and MySQL COnnector to be installed. Also, put the .jar file that comes with MySQL connector to the folder where Java programs are 
currently stored. In VS Code, go to JAVA PROJECTS at the bottom-right corner, choose Referenced Libraries and add the same .jar file
that comes with MySQL connector.
In Ubuntu Go to the Terminal and access the path of the XAMPP to run MySQL.
/opt/lampp/bin/mysql -u root -p

https://chat.openai.com/share/d7e464dd-2778-4d15-ace4-ece0c5868fed
_____________________________________________________________________________________________________________________________________________________
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class javadb {

    public static void main(String[] args) {
        
        String jdbcUrl = "jdbc:mysql://localhost:3306/sample_db";
        String username = "root";
        String password = "";  

        try {
            Connection connection = DriverManager.getConnection(jdbcUrl, username, password);

           
            String query = "SELECT * FROM employees";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            
            while (resultSet.next()) {
                int employeeId = resultSet.getInt("employee_id");
                String employeeName = resultSet.getString("employee_name");
                String jobTitle = resultSet.getString("job_title");
                double salary = resultSet.getDouble("salary");

                System.out.println("Employee ID: " + employeeId +
                        ", Name: " + employeeName +
                        ", Job Title: " + jobTitle +
                        ", Salary: " + salary);
            }

           
            resultSet.close();
            preparedStatement.close();
            connection.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
